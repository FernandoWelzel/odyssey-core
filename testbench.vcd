$date
	Thu Oct  3 17:25:10 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! inst_inversed [0:31] $end
$var wire 32 " w_data [31:0] $end
$var wire 1 # inst_csn $end
$var wire 32 $ inst_address [31:0] $end
$var wire 32 % data_address [31:0] $end
$var parameter 32 & DATA_WIDTH $end
$var parameter 32 ' PERIOD $end
$var parameter 32 ( REGISTERS $end
$var reg 1 ) clk $end
$var reg 32 * inst [31:0] $end
$var reg 32 + r_data [31:0] $end
$var reg 1 , rst $end
$var integer 32 - FILE [31:0] $end
$scope function read_int_from_file $end
$upscope $end
$scope module core_i $end
$var wire 1 ) clk $end
$var wire 32 . inst [31:0] $end
$var wire 32 / r_data [31:0] $end
$var wire 1 , rst $end
$var wire 5 0 rs2 [4:0] $end
$var wire 5 1 rs1 [4:0] $end
$var wire 5 2 rd [4:0] $end
$var wire 7 3 opcode [6:0] $end
$var wire 12 4 imm_s [11:0] $end
$var wire 12 5 imm_i [11:0] $end
$var wire 7 6 funct7 [6:0] $end
$var wire 3 7 funct3 [2:0] $end
$var parameter 32 8 DATA_WIDTH $end
$var parameter 32 9 REGISTERS $end
$var reg 32 : data_address [31:0] $end
$var reg 1 ; data_csn $end
$var reg 1 < data_wen $end
$var reg 32 = inst_address [31:0] $end
$var reg 1 # inst_csn $end
$var reg 12 > pc_jump [11:0] $end
$var reg 32 ? w_data [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 @ i [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 A i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 9
b100000 8
b100000 (
b1010 '
b100000 &
$end
#0
$dumpvars
b100000 A
b0 @
bx ?
bx >
bx =
x<
x;
bx :
b0 7
b0 6
b1 5
b1 4
b10011 3
b1 2
b0 1
b1 0
bx /
b100000000000010010011 .
b10000000000000000000000000000011 -
0,
bx +
b100000000000010010011 *
0)
bx %
bx $
x#
bx "
b100000000000010010011 !
$end
#5
b1 >
1)
#10
0)
b10 4
b10 0
b10 5
b10 2
b1000000000000100010011 !
b1000000000000100010011 *
b1000000000000100010011 .
#15
1)
#20
0)
b11 4
b11 0
b11 5
b11 2
b1100000000000110010011 !
b1100000000000110010011 *
b1100000000000110010011 .
#25
1)
#30
0)
b100 4
b100 0
b100 5
b100 2
b10000000000001000010011 !
b10000000000001000010011 *
b10000000000001000010011 .
#35
1)
#40
0)
b101 4
b101 0
b101 5
b101 2
b10100000000001010010011 !
b10100000000001010010011 *
b10100000000001010010011 .
#45
1)
#50
0)
b110 4
b110 0
b110 5
b110 2
b11000000000001100010011 !
b11000000000001100010011 *
b11000000000001100010011 .
#55
1)
#60
0)
b111 4
b111 0
b111 5
b111 2
b11100000000001110010011 !
b11100000000001110010011 *
b11100000000001110010011 .
#65
1)
#70
0)
b1000 4
b1000 0
b1000 5
b1000 2
b100000000000010000010011 !
b100000000000010000010011 *
b100000000000010000010011 .
#75
1)
#80
0)
b1001 4
b1001 0
b1001 5
b1001 2
b100100000000010010010011 !
b100100000000010010010011 *
b100100000000010010010011 .
#85
1)
#90
0)
b1010 4
b1010 2
b100100000000010100010011 !
b100100000000010100010011 *
b100100000000010100010011 .
#95
1)
#100
0)
b10 0
b10 5
b1 1
b110011 3
b1000001000010100110011 !
b1000001000010100110011 *
b1000001000010100110011 .
#105
1)
#110
0)
b0 4
b1001 1
b1010 0
b1010 5
b10 7
b0 2
b100011 3
b101001001010000000100011 !
b101001001010000000100011 *
b101001001010000000100011 .
#115
b1010 %
b1010 :
b101 "
b101 ?
1)
#120
0)
